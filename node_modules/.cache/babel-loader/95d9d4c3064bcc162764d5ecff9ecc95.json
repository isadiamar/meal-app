{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Isabel D\\xEDaz\\\\Desktop\\\\Proyectos\\\\meal-app\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nimport CartContext from \"./cart-context\"; //Initial State\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; //Reducer Function\n\nconst cartReducer = (state, action) => {\n  // Add an item\n  if (action.type === \"ADD\") {\n    //Update the total Amount\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount; //Search if the index of the item is in our list\n\n    const existingItemCartIndex = state.items.findIndex(item => item.id == action.item.id); //Find the element by index\n\n    const existingCartItems = state.items[existingItemCartIndex]; //If the element already exists, increase the amount but stay in one CardItem\n\n    let updatedItems;\n\n    if (existingCartItems) {\n      const updatedItem = { ...existingCartItems,\n        amount: existingCartItems.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingItemCartIndex] = updatedItem; //If the element not exists in the cart, just bring it to the cart\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  } //Remove an item\n\n\n  if (action.type === \"REMOVE\") {\n    //Search the index of that id in the list\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id); //Search the item by index\n\n    const existingItem = state.items[existingCartItemIndex]; //Update the total amount\n\n    const updatedTotalAmount = state.totalAmount - existingItem.price; //Update the items\n\n    let updatedItems; //If there is only one, remove the item\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id); //If there are more, decrease by one the amount\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"CLEAR\") {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n}; //CartProvider Component\n\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState); //Handler Functions\n\n  const addItemToCartHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n\n  const clearCartHandler = () => {\n    dispatchCartAction({\n      type: \"CLEAR\"\n    });\n  }; //State Contenxt\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["C:/Users/Isabel DÃ­az/Desktop/Proyectos/meal-app/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingItemCartIndex","findIndex","id","existingCartItems","updatedItems","updatedItem","concat","existingCartItemIndex","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAE,EADgB;AAEvBC,EAAAA,WAAW,EAAE;AAFU,CAAzB,C,CAKA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACrC;AACA,MAAIA,MAAM,CAACC,IAAP,KAAgB,KAApB,EAA2B;AACzB;AACA,UAAMC,kBAAkB,GACtBH,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACG,IAAP,CAAYC,KAAZ,GAAoBJ,MAAM,CAACG,IAAP,CAAYE,MADtD,CAFyB,CAIzB;;AACA,UAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,IAAWR,MAAM,CAACG,IAAP,CAAYK,EADL,CAA9B,CALyB,CAQzB;;AACA,UAAMC,iBAAiB,GAAGV,KAAK,CAACH,KAAN,CAAYU,qBAAZ,CAA1B,CATyB,CAUzB;;AACA,QAAII,YAAJ;;AACA,QAAID,iBAAJ,EAAuB;AACrB,YAAME,WAAW,GAAG,EAClB,GAAGF,iBADe;AAElBJ,QAAAA,MAAM,EAAEI,iBAAiB,CAACJ,MAAlB,GAA2BL,MAAM,CAACG,IAAP,CAAYE;AAF7B,OAApB;AAIAK,MAAAA,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;AACAc,MAAAA,YAAY,CAACJ,qBAAD,CAAZ,GAAsCK,WAAtC,CANqB,CAOrB;AACD,KARD,MAQO;AACLD,MAAAA,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYgB,MAAZ,CAAmBZ,MAAM,CAACG,IAA1B,CAAf;AACD;;AAED,WAAO;AACLP,MAAAA,KAAK,EAAEc,YADF;AAELb,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID,GA9BoC,CA+BrC;;;AACA,MAAIF,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC5B;AACA,UAAMY,qBAAqB,GAAGd,KAAK,CAACH,KAAN,CAAYW,SAAZ,CAC3BJ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACQ,EADD,CAA9B,CAF4B,CAK5B;;AACA,UAAMM,YAAY,GAAGf,KAAK,CAACH,KAAN,CAAYiB,qBAAZ,CAArB,CAN4B,CAO5B;;AACA,UAAMX,kBAAkB,GAAGH,KAAK,CAACF,WAAN,GAAoBiB,YAAY,CAACV,KAA5D,CAR4B,CAS5B;;AACA,QAAIM,YAAJ,CAV4B,CAW5B;;AACA,QAAII,YAAY,CAACT,MAAb,KAAwB,CAA5B,EAA+B;AAC7BK,MAAAA,YAAY,GAAGX,KAAK,CAACH,KAAN,CAAYmB,MAAZ,CAAoBZ,IAAD,IAAUA,IAAI,CAACK,EAAL,KAAYR,MAAM,CAACQ,EAAhD,CAAf,CAD6B,CAE7B;AACD,KAHD,MAGO;AACL,YAAMG,WAAW,GAAG,EAAE,GAAGG,YAAL;AAAmBT,QAAAA,MAAM,EAAES,YAAY,CAACT,MAAb,GAAsB;AAAjD,OAApB;AACAK,MAAAA,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAV,CAAf;AACAc,MAAAA,YAAY,CAACG,qBAAD,CAAZ,GAAsCF,WAAtC;AACD;;AACD,WAAO;AACLf,MAAAA,KAAK,EAAEc,YADF;AAELb,MAAAA,WAAW,EAAEK;AAFR,KAAP;AAID;;AAED,MAAIF,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3B,WAAON,gBAAP;AACD;;AACD,SAAOA,gBAAP;AACD,CA9DD,C,CAgEA;;;AACA,MAAMqB,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAC9B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAkC1B,UAAU,CAChDK,WADgD,EAEhDH,gBAFgD,CAAlD,CAD8B,CAM9B;;AACA,QAAMyB,oBAAoB,GAAIjB,IAAD,IAAU;AACrCgB,IAAAA,kBAAkB,CAAC;AAAElB,MAAAA,IAAI,EAAE,KAAR;AAAeE,MAAAA,IAAI,EAAEA;AAArB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMkB,yBAAyB,GAAIb,EAAD,IAAQ;AACxCW,IAAAA,kBAAkB,CAAC;AAAElB,MAAAA,IAAI,EAAE,QAAR;AAAkBO,MAAAA,EAAE,EAAEA;AAAtB,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAMc,gBAAgB,GAAG,MAAK;AAC5BH,IAAAA,kBAAkB,CAAC;AAAClB,MAAAA,IAAI,EAAC;AAAN,KAAD,CAAlB;AACD,GAFD,CAf8B,CAmB9B;;;AACA,QAAMsB,WAAW,GAAG;AAClB3B,IAAAA,KAAK,EAAEsB,SAAS,CAACtB,KADC;AAElBC,IAAAA,WAAW,EAAEqB,SAAS,CAACrB,WAFL;AAGlB2B,IAAAA,OAAO,EAAEJ,oBAHS;AAIlBK,IAAAA,UAAU,EAAEJ;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACGN,KAAK,CAACS;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAhCD;;GAAMV,Y;;KAAAA,Y;AAkCN,eAAeA,YAAf","sourcesContent":["import { useReducer } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\n//Initial State\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\n//Reducer Function\r\nconst cartReducer = (state, action) => {\r\n  // Add an item\r\n  if (action.type === \"ADD\") {\r\n    //Update the total Amount\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n    //Search if the index of the item is in our list\r\n    const existingItemCartIndex = state.items.findIndex(\r\n      (item) => item.id == action.item.id\r\n    );\r\n    //Find the element by index\r\n    const existingCartItems = state.items[existingItemCartIndex];\r\n    //If the element already exists, increase the amount but stay in one CardItem\r\n    let updatedItems;\r\n    if (existingCartItems) {\r\n      const updatedItem = {\r\n        ...existingCartItems,\r\n        amount: existingCartItems.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingItemCartIndex] = updatedItem;\r\n      //If the element not exists in the cart, just bring it to the cart\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  //Remove an item\r\n  if (action.type === \"REMOVE\") {\r\n    //Search the index of that id in the list\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n    //Search the item by index\r\n    const existingItem = state.items[existingCartItemIndex];\r\n    //Update the total amount\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n    //Update the items\r\n    let updatedItems;\r\n    //If there is only one, remove the item\r\n    if (existingItem.amount === 1) {\r\n      updatedItems = state.items.filter((item) => item.id !== action.id);\r\n      //If there are more, decrease by one the amount\r\n    } else {\r\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"CLEAR\") {\r\n    return defaultCartState;\r\n  }\r\n  return defaultCartState;\r\n};\r\n\r\n//CartProvider Component\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  //Handler Functions\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const clearCartHandler = () =>{\r\n    dispatchCartAction({type:\"CLEAR\"})\r\n  }\r\n\r\n  //State Contenxt\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}