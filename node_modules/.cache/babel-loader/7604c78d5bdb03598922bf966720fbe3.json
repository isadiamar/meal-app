{"ast":null,"code":"var _jsxFileName = \"D:\\\\Front-End\\\\Proyectos\\\\meal-app\\\\src\\\\store\\\\CartProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport CartContext from './cart-context'; //Initial State\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n}; //Reducer function\n\nconst cartReducer = (state, action) => {\n  if (action.type === 'ADD') {\n    const updatedItems = state.items.concat(action.item);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      amount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === 'REMOVE') {\n    const updatedItems = state.items.filter(item => item.id == !id);\n    const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n  } else {\n    return defaultCartState;\n  }\n}; // Create the logic and the updates.\n\n\nexport const CartContextProvider = props => {\n  _s();\n\n  const [cartState, dispatchCart] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispatchCart({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispatchCart({\n      type: 'REMOVE',\n      id: id\n    });\n  }; //Context of the Cart\n\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 7\n  }, this);\n};\n\n_s(CartContextProvider, \"ZY2kzjH0eT2UJ8xdytMWU1wIqqA=\");\n\n_c = CartContextProvider;\nexport default CartContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["D:/Front-End/Proyectos/meal-app/src/store/CartProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","updatedTotalAmount","price","amount","filter","id","CartContextProvider","props","cartState","dispatchCart","addItemToCartHandler","removeItemFromCartHandler","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AAEA,OAAOC,WAAP,MAAwB,gBAAxB,C,CAEA;;;AACA,MAAMC,gBAAgB,GAAG;AACvBC,EAAAA,KAAK,EAAG,EADe;AAEvBC,EAAAA,WAAW,EAAC;AAFW,CAAzB,C,CAIA;;AACA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AAClC,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAAyB;AACxB,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,UAAMC,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E;AACA,WAAM;AACJX,MAAAA,KAAK,EAACM,YADF;AAEJK,MAAAA,MAAM,EAACF;AAFH,KAAN;AAIA;;AACD,MAAGL,MAAM,CAACC,IAAP,KAAgB,QAAnB,EAA4B;AAC1B,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYY,MAAZ,CAAmBJ,IAAI,IAAIA,IAAI,CAACK,EAAL,IAAU,CAAEA,EAAvC,CAArB;AACA,UAAMJ,kBAAkB,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA/E;AAED,GAJD,MAKI;AACF,WAAOZ,gBAAP;AACD;AACJ,CAjBD,C,CAoBA;;;AACA,OAAO,MAAMe,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC1C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BpB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAA5C;;AAEA,QAAMmB,oBAAoB,GAAIV,IAAD,IAAU;AACrCS,IAAAA,YAAY,CAAC;AAACZ,MAAAA,IAAI,EAAC,KAAN;AAAaG,MAAAA,IAAI,EAAGA;AAApB,KAAD,CAAZ;AACD,GAFD;;AAIA,QAAMW,yBAAyB,GAAIN,EAAD,IAAQ;AACxCI,IAAAA,YAAY,CAAC;AAACZ,MAAAA,IAAI,EAAC,QAAN;AAAgBQ,MAAAA,EAAE,EAAGA;AAArB,KAAD,CAAZ;AAED,GAHD,CAP0C,CAY1C;;;AACA,QAAMO,WAAW,GAAG;AAClBpB,IAAAA,KAAK,EAAEgB,SAAS,CAAChB,KADC;AAElBC,IAAAA,WAAW,EAAEe,SAAS,CAACf,WAFL;AAGlBoB,IAAAA,OAAO,EAAEH,oBAHS;AAIlBI,IAAAA,UAAU,EAAEH;AAJM,GAApB;AAOA,sBACE,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEC,WAA7B;AAAA,cACGL,KAAK,CAACQ;AADT;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAzBI;;GAAMT,mB;;KAAAA,mB;AA2BX,eAAeA,mBAAf","sourcesContent":["import React,{useReducer} from 'react';\r\n\r\nimport CartContext from './cart-context';\r\n\r\n//Initial State\r\nconst defaultCartState = {\r\n  items : [],\r\n  totalAmount:0\r\n}\r\n//Reducer function\r\nconst cartReducer = (state, action) =>{\r\n    if(action.type === 'ADD'){\r\n     const updatedItems = state.items.concat(action.item);\r\n     const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n     return{\r\n       items:updatedItems,\r\n       amount:updatedTotalAmount\r\n     }\r\n    }\r\n    if(action.type === 'REMOVE'){\r\n      const updatedItems = state.items.filter(item => item.id ==! id);\r\n      const updatedTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n      \r\n    }\r\n    else{\r\n      return defaultCartState;\r\n    }\r\n}\r\n\r\n\r\n// Create the logic and the updates.\r\nexport const CartContextProvider = (props) => {\r\n    const [cartState, dispatchCart] = useReducer(cartReducer, defaultCartState);\r\n\r\n    const addItemToCartHandler = (item) => {\r\n      dispatchCart({type:'ADD', item : item})\r\n    };\r\n  \r\n    const removeItemFromCartHandler = (id) => {\r\n      dispatchCart({type:'REMOVE', id : id})\r\n      \r\n    };\r\n\r\n    //Context of the Cart\r\n    const cartContext = {\r\n      items: cartState.items,\r\n      totalAmount: cartState.totalAmount,\r\n      addItem: addItemToCartHandler,\r\n      removeItem: removeItemFromCartHandler,\r\n    };\r\n  \r\n    return (\r\n      <CartContext.Provider value={cartContext}>\r\n        {props.children}\r\n      </CartContext.Provider>\r\n    );\r\n  };\r\n  \r\n  export default CartContextProvider;"]},"metadata":{},"sourceType":"module"}